C51 COMPILER V9.60.7.0   ODBIORNIK_BCD                                                     01/11/2025 11:39:45 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE ODBIORNIK_BCD
OBJECT MODULE PLACED IN .\Objects\odbiornik_bcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE odbiornik_bcd.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\odb
                    -iornik_bcd.lst) TABS(2) OBJECT(.\Objects\odbiornik_bcd.obj)

line level    source

   1          #include <REGX52.H>
   2          
   3          
   4          unsigned char xdata Ones _at_ 0xFD00;
   5          unsigned char xdata Tens _at_ 0xFE00;
   6          
   7          unsigned char code Koder[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39
             -, 0x5E, 0x79, 0x71, 0x6F, 0x76, 0x30, 0x1E, 0x76, 0x38, 0x15, 0x54, 0x3F, 0x73, 0x67, 0x50, 0x6D, 0x78, 0x3E, 0x1C, 0x2A
             -, 0x76, 0x66, 0x5B}; // 8 bitow czyli char, musi globalna byc, bbo w przerwaniu chce uzyc, mam dla 0 1 2 3, wiec potem d
             -la kolejnych trzeba
   8          
   9          volatile unsigned char data segmentLeft;
  10          volatile unsigned char data segmentRight;
  11          unsigned char i = 0;
  12            
  13          bit isPressed = 0; // czy wcisniete
  14          
  15          void sleep()
  16          {
  17   1          int i, j;
  18   1          for(i = 0; i < 70; i++)
  19   1          {
  20   2              for(j = 0; j < 70; j++)
  21   2              {
  22   3                  /* nic */;
  23   3              }
  24   2          }
  25   1      }
  26            
  27          void blank_bcd(unsigned char side) {
  28   1        if (side == 1)      segmentLeft = 0x00;
  29   1        else if (side == 2) segmentRight = 0x00;
  30   1      }
  31          
  32          void displayText(unsigned char character, unsigned char bcd_side) {
  33   1        
  34   1        unsigned int ascii = character;
  35   1        switch (ascii) {
  36   2          
  37   2          
  38   2          case 32: character = 0x00;          break;
  39   2          
  40   2          case 48: character = Koder[0];          break;
  41   2          case 49: character = Koder[1];          break;
  42   2          case 50: character = Koder[2];          break;
  43   2          case 51: character = Koder[3];          break;
  44   2          case 52: character = Koder[4];        break;
  45   2          case 53: character = Koder[5];          break;
  46   2          case 54: character = Koder[6];          break;
  47   2          case 55: character = Koder[7];        break;
  48   2          case 56: character = Koder[8];        break;
  49   2          case 57: character = Koder[9];      break;
  50   2          
  51   2          case 65: case 97:   character = Koder[10];  break;
C51 COMPILER V9.60.7.0   ODBIORNIK_BCD                                                     01/11/2025 11:39:45 PAGE 2   

  52   2          case 66: case 98:   character = Koder[11];  break;
  53   2          case 67: case 99:   character = Koder[12];  break;
  54   2          case 68: case 100:  character = Koder[13];  break;
  55   2          case 69: case 101:  character = Koder[14];  break;
  56   2          case 70: case 102:  character = Koder[15];  break;
  57   2          case 71: case 103:  character = Koder[16];  break;
  58   2          case 72: case 104:  character = Koder[17];  break;
  59   2          case 73: case 105:  character = Koder[18];  break;
  60   2          case 74: case 106:  character = Koder[19];  break;
  61   2          case 75: case 107:  character = Koder[20];  break;
  62   2          case 76: case 108:  character = Koder[21];  break;
  63   2          case 77: case 109:  character = Koder[22];  break;
  64   2          case 78: case 110:  character = Koder[23];  break;
  65   2          case 79: case 111:  character = Koder[24];  break;
  66   2          case 80: case 112:  character = Koder[25];  break;
  67   2          case 81: case 113:  character = Koder[26];  break;
  68   2          case 82: case 114:  character = Koder[27];  break;
  69   2          case 83: case 115:  character = Koder[28];  break;
  70   2          case 84: case 116:  character = Koder[29];  break;
  71   2          case 85: case 117:  character = Koder[30];  break;
  72   2          case 86: case 118:  character = Koder[31];  break;
  73   2          case 87: case 119:  character = Koder[32];  break;
  74   2          case 88: case 120:  character = Koder[33];  break;
  75   2          case 89: case 121:  character = Koder[34];  break;
  76   2          case 90: case 122:  character = Koder[35];  break;
  77   2      
  78   2          default: P1 = ascii;  break;
  79   2        }
  80   1        
  81   1        if (bcd_side == 1)      segmentLeft = character;
  82   1        else if (bcd_side == 2) segmentRight = character;
  83   1      }
  84          bit correct = 0;
  85          bit incorrect = 0;
  86          unsigned char receivedByte;
  87          void ISR_Serial(void) interrupt  4
  88          {
  89   1        if(TI == 1) {TI = 0;}
  90   1        if(RI == 1)
  91   1         {
  92   2           RI = 0;
  93   2           receivedByte = SBUF;
  94   2           sleep();
  95   2           if(receivedByte == '1') {correct = 1;}
  96   2           else if(receivedByte == '0') {incorrect = 1;}
  97   2           IE1 = 1;
  98   2         }
  99   1      }  
 100          
 101          
 102          // T1
 103          void ISR_T1() interrupt 3
 104          { 
 105   1          if(correct)
 106   1          {
 107   2            displayText('O', 1);
 108   2            displayText('N', 2);
 109   2            P1_0 = 1;
 110   2            correct = 0;
 111   2          }
 112   1        
 113   1          if(incorrect)
C51 COMPILER V9.60.7.0   ODBIORNIK_BCD                                                     01/11/2025 11:39:45 PAGE 3   

 114   1          {
 115   2            displayText('O', 1);
 116   2            displayText('F', 2);
 117   2            P1_1 = 1;
 118   2            incorrect = 0;
 119   2          }
 120   1        }
 121          
 122          void Init(void)
 123            {
 124   1          P3_4 = 0;
 125   1            
 126   1          SCON = 0x50;
 127   1          T2CON = 0x30;
 128   1          TH2 = RCAP2H = 0xFF;
 129   1          TL2 = RCAP2L = 0xDC;
 130   1          TR2=1;
 131   1          ES = 1;
 132   1          EA  = 1;
 133   1          
 134   1          
 135   1          EX0 = 1;  // zezwalam na przerwanie INT0
 136   1          IT0 = 1;  // przerwanie INT0 na zbocze opadajace
 137   1        
 138   1          // T1
 139   1          EX1 = 1;
 140   1          IT1 = 1;
 141   1          ET1 = 1;
 142   1          TR1 = 1; // uruchamiam w tryb pracy timera 1, bo normalnie stop
 143   1          TMOD = 0 | T1_M0_; 
 144   1        }
 145          
 146          void main(void)
 147          {
 148   1          Init();
 149   1          while (1) {       
 150   2              Tens = segmentLeft;
 151   2              Ones = segmentRight;
 152   2          }
 153   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    674    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
