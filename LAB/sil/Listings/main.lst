C51 COMPILER V9.60.7.0   MAIN                                                              12/19/2024 20:17:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\main.lst) TA
                    -BS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          
   3          #define SPINS1_TO_2 18
   4          #define SPINS2_TO_2 19
   5          #define SPINS1_TO_1 20
   6          #define SPINS2_TO_1 21
   7          
   8          char pwmHelper1 = 0; // Timer 0 PWM helper
   9          char pwmHelper2 = 0; // Timer 1 PWM helper
  10          
  11          unsigned char spins1 = 0; // obroty silnika 1 (INT1)
  12          unsigned char spins2 = 0; // obroty silnika 2 (INT0)
  13          
  14          typedef enum {
  15              STATE_1,
  16              STATE_2,
  17          } programState;
  18          
  19          programState state = STATE_1;
  20          
  21          // licznik obrotow INT0 dla silnika 2
  22          void ISR_INT0() interrupt 0 {
  23   1          spins2++;
  24   1      }
  25          
  26          // licznik obrotow INT1 dla silnika 1
  27          void ISR_INT1() interrupt 2 {
  28   1          spins1++;
  29   1      }
  30          
  31          // funkcja obslugi Timera 0
  32          void ISR_T0() interrupt 1 {
  33   1          //TH0 = 250;
  34   1      
  35   1          if (state == STATE_1) {
  36   2              // silnik 2: 5/6 max predkosci
  37   2              // cykl = 6, wlaczone = 5
  38   2              if (pwmHelper1 < 5)
  39   2                  P2_4 = 1;
  40   2              else
  41   2                  P2_4 = 0;
  42   2      
  43   2              pwmHelper1++;
  44   2              if (pwmHelper1 == 6)
  45   2                  pwmHelper1 = 0;
  46   2      
  47   2              // przejscie do stanu 2, po spelnieniu warunkow
  48   2              if (spins1 == SPINS1_TO_2 || spins2 == SPINS2_TO_2) {
  49   3                  pwmHelper1 = 0;
  50   3                  pwmHelper2 = 0;
  51   3                  spins1 = 0;
  52   3                  spins2 = 0;
  53   3                  state = STATE_2;
  54   3              }
C51 COMPILER V9.60.7.0   MAIN                                                              12/19/2024 20:17:25 PAGE 2   

  55   2      
  56   2          } else {
  57   2              // silnik 1: 1/8 max predkosci
  58   2              // cykl = 8, wlaczone = 1
  59   2              if (pwmHelper1 < 1)
  60   2                  P2_3 = 1;
  61   2              else
  62   2                  P2_3 = 0;
  63   2      
  64   2              pwmHelper1++;
  65   2              if (pwmHelper1 == 8)
  66   2                  pwmHelper1 = 0;
  67   2      
  68   2              // przejscie do stanu 1, po spelnieniu warunkow
  69   2              if (spins1 == SPINS1_TO_1 || spins2 == SPINS2_TO_1) {
  70   3                  pwmHelper1 = 0;
  71   3                  pwmHelper2 = 0;
  72   3                  spins1 = 0;
  73   3                  spins2 = 0;
  74   3                  state = STATE_1;
  75   3              }
  76   2          }
  77   1      }
  78          
  79          // funkcja obslugi Timera 1
  80          void ISR_T1() interrupt 3 {
  81   1          //TH1 = 250;
  82   1      
  83   1          if (state == STATE_1) {
  84   2              // silnik 1: 3/5 max predkosci
  85   2              // cykl = 5, wlaczone = 3
  86   2              if (pwmHelper2 < 3)
  87   2                  P2_3 = 1;
  88   2              else
  89   2                  P2_3 = 0;
  90   2      
  91   2              pwmHelper2++;
  92   2              if (pwmHelper2 == 5)
  93   2                  pwmHelper2 = 0;
  94   2      
  95   2          } else {
  96   2              // silnik 2: 3/8 max predkosci
  97   2              // cykl = 8, wlaczone = 3
  98   2              if (pwmHelper2 < 3)
  99   2                  P2_4 = 1;
 100   2              else
 101   2                  P2_4 = 0;
 102   2      
 103   2              pwmHelper2++;
 104   2              if (pwmHelper2 == 8)
 105   2                  pwmHelper2 = 0;
 106   2          }
 107   1      }
 108          
 109          void main(void) {
 110   1          P1 = 0;
 111   1      
 112   1          // INT0 (silnik 2), port 3_2
 113   1          IT0 = 1;
 114   1          EX0 = 1; // przerwania zewnetrzne
 115   1      
 116   1          // INT1 (silnik 1), port 3_3
C51 COMPILER V9.60.7.0   MAIN                                                              12/19/2024 20:17:25 PAGE 3   

 117   1          IT1 = 1;
 118   1          EX1 = 1; // przerwania zewnetrzne
 119   1      
 120   1          // Timer 0
 121   1          TL0 = 0;
 122   1          TH0 = 250;
 123   1          TR0 = 1;
 124   1          ET0 = 1;
 125   1      
 126   1          // Timer 1
 127   1          TL1 = 0;
 128   1          TH1 = 250;
 129   1          TR1 = 1;
 130   1          ET1 = 1;
 131   1      
 132   1          EA = 1; // wlaczam globalne przerwania
 133   1      
 134   1          while (1) {
 135   2              if (state == STATE_1) {
 136   3                // stan 1: Timer0 tryb 0, Timer1 tryb 0
 137   3                  TMOD = 0x00;
 138   3      
 139   3                  // kierunek obrotu silników w stanie 1:
 140   3                  // silnik 1 przeciwnie
 141   3                  P2_1 = 0;
 142   3                  P2_2 = 1;
 143   3      
 144   3                  // silnik 2 zgodnie
 145   3                  P2_5 = 1;
 146   3                  P2_6 = 0;
 147   3              } else {
 148   3                // stan 2: Timer0 tryb 2, Timer1 tryb 2
 149   3                  TMOD = 0x22;
 150   3      
 151   3                  // kierunek silników w stanie 2:
 152   3                  // silnik 1 zgodnie
 153   3                  P2_1 = 1;
 154   3                  P2_2 = 0;
 155   3      
 156   3                  // silnik 2 przeciwnie
 157   3                  P2_5 = 0;
 158   3                  P2_6 = 1;
 159   3              }
 160   2          }
 161   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    258    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
