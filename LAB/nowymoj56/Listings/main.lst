C51 COMPILER V9.60.7.0   MAIN                                                              11/22/2024 23:04:19 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\main.lst) TA
                    -BS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          
   3          #define FROM  5
   4          #define TO  30
   5          
   6          // 0 malejaca, 1 rosnaca
   7          #define COUNT_DIRECTION 0
   8          
   9          unsigned char xdata Ones _at_ 0xFD00;
  10          unsigned char xdata Tens _at_ 0xFE00;
  11          
  12          unsigned char code Koder[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39
             -, 0x5E, 0x79, 0x71, 0x6F, 0x76, 0x30, 0x1E, 0x76, 0x38, 0x15, 0x54, 0x3F, 0x73, 0x67, 0x50, 0x6D, 0x78, 0x3E, 0x1C, 0x2A
             -, 0x76, 0x66, 0x5B}; // 8 bitow czyli char, musi globalna byc, bbo w przerwaniu chce uzyc, mam dla 0 1 2 3, wiec potem d
             -la kolejnych trzeba
  13          unsigned char code animationLeft[] = {0x40, 0x40, 0x60, 0x60, 0x61, 0x61, 0x23, 0x07, 0x0F, 0x0E, 0x1E, 0x
             -1C, 0x5C, 0x58, 0x58, 0x50, 0x50, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
  14          unsigned char code animationRight[] = {0x4C, 0x44, 0x44, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0
             -x00, 0x00, 0x00, 0x40, 0x40, 0x42, 0x42, 0x43, 0x43, 0x63, 0x23, 0x33, 0x31, 0x38, 0x1C, 0x5C};
  15          
  16          volatile signed char animationIndx = 26;
  17          unsigned char isFirstClick = 0, timeBetweenClicks;
  18          
  19          unsigned char j = TO;
  20          volatile unsigned char data segmentLeft;
  21          volatile unsigned char data segmentRight;
  22                                       
  23                                       
  24                                       
  25          bit isPressed = 0; // czy wcisniete
  26          unsigned char animationNum = 0;
  27          
  28          typedef enum {
  29            STATE_WAIT_FOR_CLICK,
  30            STATE_WAIT_FOR_DOUBLE_CLICK,
  31            STATE_WAIT_FOR_RELEASE
  32          } State;
  33          
  34          State programState = STATE_WAIT_FOR_RELEASE;
  35          
  36          char text[] = " 81 kazelS lahciM"; // ;-)
  37          char textSize = sizeof(text);
  38          
  39          void blank_bcd(unsigned char side) {
  40   1        if (side == 1)      segmentLeft = 0x00;
  41   1        else if (side == 2) segmentRight = 0x00;
  42   1      }
  43          
  44          
  45          void displayText(unsigned char character, unsigned char bcd_side) {
  46   1        
  47   1        unsigned int ascii = character;
  48   1        switch (ascii) {
  49   2          
C51 COMPILER V9.60.7.0   MAIN                                                              11/22/2024 23:04:19 PAGE 2   

  50   2          
  51   2          case 32: character = 0x00;          break;
  52   2          
  53   2          case 48: character = Koder[0];          break;
  54   2          case 49: character = Koder[1];          break;
  55   2          case 50: character = Koder[2];          break;
  56   2          case 51: character = Koder[3];          break;
  57   2          case 52: character = Koder[4];        break;
  58   2          case 53: character = Koder[5];          break;
  59   2          case 54: character = Koder[6];          break;
  60   2          case 55: character = Koder[7];        break;
  61   2          case 56: character = Koder[8];        break;
  62   2          case 57: character = Koder[9];      break;
  63   2          
  64   2          case 65: case 97:   character = Koder[10];  break;
  65   2          case 66: case 98:   character = Koder[11];  break;
  66   2          case 67: case 99:   character = Koder[12];  break;
  67   2          case 68: case 100:  character = Koder[13];  break;
  68   2          case 69: case 101:  character = Koder[14];  break;
  69   2          case 70: case 102:  character = Koder[15];  break;
  70   2          case 71: case 103:  character = Koder[16];  break;
  71   2          case 72: case 104:  character = Koder[17];  break;
  72   2          case 73: case 105:  character = Koder[18];  break;
  73   2          case 74: case 106:  character = Koder[19];  break;
  74   2          case 75: case 107:  character = Koder[20];  break;
  75   2          case 76: case 108:  character = Koder[21];  break;
  76   2          case 77: case 109:  character = Koder[22];  break;
  77   2          case 78: case 110:  character = Koder[23];  break;
  78   2          case 79: case 111:  character = Koder[24];  break;
  79   2          case 80: case 112:  character = Koder[25];  break;
  80   2          case 81: case 113:  character = Koder[26];  break;
  81   2          case 82: case 114:  character = Koder[27];  break;
  82   2          case 83: case 115:  character = Koder[28];  break;
  83   2          case 84: case 116:  character = Koder[29];  break;
  84   2          case 85: case 117:  character = Koder[30];  break;
  85   2          case 86: case 118:  character = Koder[31];  break;
  86   2          case 87: case 119:  character = Koder[32];  break;
  87   2          case 88: case 120:  character = Koder[33];  break;
  88   2          case 89: case 121:  character = Koder[34];  break;
  89   2          case 90: case 122:  character = Koder[35];  break;
  90   2      
  91   2          default: P1 = ascii;  break;
  92   2        }
  93   1        
  94   1        if (bcd_side == 1)      segmentLeft = character;
  95   1        else if (bcd_side == 2) segmentRight = character;
  96   1      }
  97          
  98          
  99          void displayNum(unsigned int n, int base) {
 100   1              if(n < base) {
 101   2              displayText('0', 1);
 102   2              
 103   2              if (base > 10 && n >= 10) {
 104   3                displayText(n + 65 - 10, 2); 
 105   3              } else {
 106   3                displayText(n + 48, 2);
 107   3              }
 108   2              
 109   2            } else {
 110   2              unsigned int remainder = n % base; 
 111   2              unsigned int tens = (n - remainder) / base; 
C51 COMPILER V9.60.7.0   MAIN                                                              11/22/2024 23:04:19 PAGE 3   

 112   2              
 113   2              if (base > 10 && tens >= 10) {
 114   3                displayText(tens + 65 - 10, 1); 
 115   3              } else {
 116   3                displayText(tens + 48, 1); 
 117   3              }
 118   2              
 119   2              if (base > 10 && tens >= 10) {
 120   3                displayText(remainder + 65 - 10, 2); 
 121   3              } else {
 122   3                displayText(remainder + 48, 2);
 123   3              }
 124   2              
 125   2            }
 126   1      }
 127          
 128          // button na przerwanie INT0
 129          void ISR_INT() interrupt 0
 130          {
 131   1          // czekam na wcisniecie
 132   1          if (P3_2 == 0 && isPressed == 0) {
 133   2            isPressed = 1;
 134   2            
 135   2            if(programState == STATE_WAIT_FOR_CLICK) // czekam na akcje uzytkownika 
 136   2            {
 137   3              // przechodze do stanu 2
 138   3              animationNum = 2;
 139   3              programState = STATE_WAIT_FOR_DOUBLE_CLICK;
 140   3            }
 141   2            
 142   2            // podwojne wcisniecie
 143   2            else if(programState == STATE_WAIT_FOR_DOUBLE_CLICK) // jestem w stanie 2 i czekam na trzecia akcje
 144   2            {
 145   3              if(!isFirstClick)
 146   3              {
 147   4                isFirstClick = 1;
 148   4                timeBetweenClicks = 0;
 149   4              }
 150   3              else
 151   3              {
 152   4                if(timeBetweenClicks < 2)
 153   4                {
 154   5                    animationNum = 3; // przechodze do stanu 3
 155   5                }
 156   4                isFirstClick = 0;
 157   4              }
 158   3            }
 159   2          }
 160   1      }
 161          
 162          
 163          unsigned char i = 0;
 164          // T1
 165          void ISR_T1() interrupt 3
 166          {
 167   1        if(isFirstClick) timeBetweenClicks++;
 168   1        
 169   1        if(animationNum == 1) // przewijanie tekstu w prawo automatycznie, animacja w stanie 1
 170   1        {
 171   2          displayText(text[i], 1); 
 172   2          if (i > 0) {
 173   3            displayText(text[i-1], 2);
C51 COMPILER V9.60.7.0   MAIN                                                              11/22/2024 23:04:19 PAGE 4   

 174   3          } else {
 175   3            blank_bcd(1);
 176   3          }
 177   2          i++;
 178   2          
 179   2          if (i >= textSize) i = 0;
 180   2        }
 181   1        else if(animationNum == 2) // animacja w stanie 2
 182   1        {
 183   2          segmentLeft = animationLeft[animationIndx];
 184   2          segmentRight = animationRight[animationIndx];
 185   2          
 186   2          animationIndx--;
 187   2          if(animationIndx == -1) animationIndx = 26;
 188   2        }
 189   1        else if(animationNum == 3) // animacja w stanie 3
 190   1        {   
 191   2          // rosnaco
 192   2          if (COUNT_DIRECTION == 1) {
 193   3            if (j <= TO) {
 194   4              displayNum(j, 10);
 195   4              j++;
 196   4            }else
 197   3            {
 198   4              j = FROM;
 199   4            }
 200   3          }else { // malejaco
 201   3            unsigned char current = TO - j + FROM;
 202   3            if (current >= FROM) {
 203   4              displayNum(current, 10);
 204   4              j++; 
 205   4            }else
 206   3            {
 207   4              j = FROM;
 208   4            }
 209   3          }
 210   2        }
 211   1        }
 212          
 213          
 214          
 215          void main(void)
 216          {
 217   1          EA = 1;   // globalne przerwania wlaczam
 218   1        
 219   1          EX0 = 1;  // zezwalam na przerwanie INT0
 220   1          IT0 = 1;  // przerwanie INT0 na zbocze opadajace
 221   1        
 222   1          // T1
 223   1          ET1 = 1;
 224   1          TR1 = 1; // uruchamiam w tryb pracy timera 1, bo normalnie stop
 225   1          TMOD = 0 | T1_M0_; 
 226   1        
 227   1          while (1) {
 228   2            
 229   2              // puszczenie
 230   2              if (P3_2 == 1 && isPressed == 1) {
 231   3                  isPressed = 0;  // po puszczeniu
 232   3                  
 233   3                  
 234   3                  if(programState == STATE_WAIT_FOR_RELEASE) // czekam na pierwsza akcje uzytkownika
 235   3                  {
C51 COMPILER V9.60.7.0   MAIN                                                              11/22/2024 23:04:19 PAGE 5   

 236   4                    animationNum = 1;
 237   4                    programState = STATE_WAIT_FOR_CLICK;
 238   4                  }
 239   3                  
 240   3              }
 241   2              
 242   2              Tens = segmentLeft;
 243   2              Ones = segmentRight;
 244   2          }
 245   1      }
*** WARNING C294 IN LINE 193 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    950    ----
   CONSTANT SIZE    =     90    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
