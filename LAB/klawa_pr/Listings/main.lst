C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 16:54:10 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\main.lst) TA
                    -BS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          
   3          extern w50mS();
   4          unsigned char data Var1, Var2, Var3;
   5          
   6          bit not_pressed_P2_4_1 = 1;
   7          bit not_pressed_P2_5_1 = 1;
   8          bit not_pressed_P2_4_2 = 1;
   9          bit not_pressed_P2_6_2 = 1; // 8
  10          bit not_pressed_P2_6_1 = 1; // 7
  11          bit not_pressed_P2_7_1 = 1; // *
  12          bit not_pressed_P2_5_2 = 1; // 5
  13          bit not_pressed_P2_7_2 = 1; // 0
  14          bit not_pressed_P2_7_3 = 1; // #
  15          bit not_pressed_P2_4_3 = 1;
  16          bit not_pressed_P2_5_3 = 1;
  17          bit not_pressed_P2_6_3 = 1;
  18          
  19          // Informacja, czy aktualnie wprowadzamy PIN
  20          bit pin_entry_in_progress = 0;
  21          
  22          // Flagi do sprawdzania poprawnej sekwencji
  23          bit correct_sequence1 = 0;
  24          bit correct_sequence2 = 0;
  25          bit correct_sequence3 = 0;
  26          
  27          // Domyslnie uklad jest ZABLOKOWANY (jak domofon)
  28          int blocked = 1;      // 1 = zablokowane, 0 = odblokowane (ale i tak tymczasowo)
  29          int blocked_5sec = 0; // Flaga blokady na 5s
  30          int wrong_pin_counter = 0;
  31          
  32          void sleep()
  33          {
  34   1          int i,j;
  35   1          for(i = 0; i < 70; i++)
  36   1          {
  37   2              for(j = 0; j < 70; j++)
  38   2              {
  39   3                  /* nic */;
  40   3              }
  41   2          }
  42   1      }
  43          
  44          // ~3 sekundy (mnoznik sleep)
  45          void sleep_3sec()
  46          {
  47   1          unsigned int x;
  48   1          for(x = 0; x < 20; x++)
  49   1              sleep();
  50   1      }
  51          
  52          // ~5 sekund (blokada czasowa)
  53          void sleep_5sec()
  54          {
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 16:54:10 PAGE 2   

  55   1          int x;
  56   1          for(x = 0; x < 20; x++)
  57   1          {
  58   2            
  59   2              w50mS();
  60   2              /*for(y = 0; y < 300; y++)
  61   2              {
  62   2                  ;
  63   2              }*/
  64   2          }
  65   1      }
  66          
  67          // Miganie 2 razy (PIN bledny)
  68          void blinkLedWrongPin()
  69          {
  70   1          unsigned char k;
  71   1          for(k = 0; k < 2; k++)
  72   1          {
  73   2              P0_0 = 0;  // LED ON
  74   2              sleep();
  75   2              P0_0 = 1;  // LED OFF
  76   2              sleep();
  77   2          }
  78   1      }
  79          
  80          // Dioda swieci ~3 sekundy (PIN poprawny)
  81          void lightLedCorrectPin3sec()
  82          {
  83   1          P0_0 = 0;       // LED ON
  84   1          sleep_3sec();   // ~3 sek
  85   1          P0_0 = 1;       // LED OFF
  86   1      }
  87          
  88          // 15 krótkich mrugniec (dzwonek)
  89          void doorbell()
  90          {
  91   1          unsigned char u;
  92   1          for(u = 0; u < 15; u++)
  93   1          {
  94   2              sleep();
  95   2              P0_0 = 0;  // LED ON
  96   2              sleep();
  97   2              P0_0 = 1;  // LED OFF
  98   2          }
  99   1      }
 100          
 101          // UART – jesli potrzebujesz wyslac bajt
 102          void sendByte(unsigned char dta)
 103          {
 104   1          P3_4 = 1;
 105   1          TI = 0;
 106   1          SBUF = dta;
 107   1          while(TI == 0)
 108   1          {;}
 109   1          TI = 0;
 110   1          P3_4 = 0;
 111   1      }
 112          
 113          // Inicjalizacja
 114          void Init()
 115          {
 116   1          EX1 = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 16:54:10 PAGE 3   

 117   1          IT1 = 1;
 118   1          SCON = 0x50;
 119   1          T2CON = 0x30;
 120   1          TH2 = RCAP2H = 0xFF;
 121   1          TL2 = RCAP2L = 0xDC;
 122   1          ES = 1;
 123   1          EA  = 1;
 124   1          TR2 = 1;
 125   1      }
 126          
 127          void main()
 128          {   
 129   1          //sleep_5sec();
 130   1          Init();
 131   1      
 132   1          // Na starcie wszystkie kolumny na 0
 133   1          P2_1 = 0;
 134   1          P2_2 = 0;
 135   1          P2_3 = 0;
 136   1          
 137   1          while(1)
 138   1          {
 139   2          
 140   2              
 141   2              // Sprawdz, czy mamy blokade 5 sekund (po 3 blednych PINach)
 142   2              if(blocked_5sec)
 143   2              {
 144   3                  // Nie pozwalamy na wpisywanie PINu
 145   3                  continue;  // skacz na poczatek petli
 146   3              }
 147   2              
 148   2              /*if(wrong_pin_counter < 3)
 149   2              {
 150   2                blocked_5sec = 0;
 151   2              }*/
 152   2              
 153   2              
 154   2              // Jezeli 3 razy bledny PIN -> wlacz blokade 5 sek
 155   2              if(wrong_pin_counter == 3)
 156   2              {
 157   3                  blocked_5sec = 1;  // wlacz flage blokady czasowej
 158   3                  // faktyczny "stop" na 5 sek. (kod ponizej nie wykona sie w tym przebiegu)
 159   3                  sleep_5sec();
 160   3                  // Po 5 sekundach wracamy tutaj
 161   3                  blocked_5sec = 0;
 162   3                  wrong_pin_counter = 0;
 163   3                  pin_entry_in_progress = 0;
 164   3                  continue;
 165   3              }
 166   2              
 167   2              //--------------------------------------------
 168   2              // Kolumna 1 (P2_1=1, P2_2=1, P2_3=0) – 
 169   2              //--------------------------------------------
 170   2              P2_1 = 1; 
 171   2              P2_2 = 1; 
 172   2              P2_3 = 0;
 173   2      
 174   2              // KLAWISZ 7 -> P2_6
 175   2              if(not_pressed_P2_6_1 && !P2_6)
 176   2              {
 177   3                  sleep();
 178   3                  correct_sequence1 = 1;    // Pierwszy krok sekwencji
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 16:54:10 PAGE 4   

 179   3                  pin_entry_in_progress = 1;
 180   3              }
 181   2              not_pressed_P2_6_1 = P2_6;
 182   2      
 183   2              // KLAWISZ * -> P2_7 (zatwierdzanie PINu)
 184   2              if(not_pressed_P2_7_1 && !P2_7)
 185   2              {
 186   3                  sleep();
 187   3                  // Jezeli sekwencja 7,5,0
 188   3                  if(correct_sequence1 == 1 && correct_sequence2 == 1 && correct_sequence3 == 1)
 189   3                  {
 190   4                      // Poprawny PIN
 191   4                      sendByte('0'); // sygnal "OK"  
 192   4                      lightLedCorrectPin3sec();    
 193   4                      // Wyzeruj stany
 194   4                      correct_sequence1 = 0;
 195   4                      correct_sequence2 = 0;
 196   4                      correct_sequence3 = 0;
 197   4                      pin_entry_in_progress = 0;
 198   4                      wrong_pin_counter = 0;
 199   4      
 200   4                  }
 201   3                  else
 202   3                  {
 203   4                      // Bledny PIN
 204   4                      wrong_pin_counter++;
 205   4                      blinkLedWrongPin();
 206   4                      sendByte('1'); // np. sygnal bledu
 207   4                      // Reset sekwencji
 208   4                      correct_sequence1 = 0;
 209   4                      correct_sequence2 = 0;
 210   4                      correct_sequence3 = 0;
 211   4                      pin_entry_in_progress = 0;
 212   4                  }
 213   3              }
 214   2              not_pressed_P2_7_1 = P2_7;
 215   2            
 216   2              // KLAWISZ 1 -> P2_4
 217   2              if(not_pressed_P2_4_1 && !P2_4)
 218   2              {
 219   3                  sleep();
 220   3                  correct_sequence1 = 0;
 221   3                  correct_sequence2 = 0;
 222   3                  correct_sequence3 = 0;
 223   3                  pin_entry_in_progress = 1;
 224   3              }
 225   2              not_pressed_P2_4_1 = P2_4;
 226   2              
 227   2              // KLAWISZ 4 -> P2_5
 228   2              if(not_pressed_P2_5_1 && !P2_5)
 229   2              {
 230   3                  sleep();
 231   3                  correct_sequence1 = 0;
 232   3                  correct_sequence2 = 0;
 233   3                  correct_sequence3 = 0;
 234   3                  pin_entry_in_progress = 1;
 235   3              }
 236   2              not_pressed_P2_5_1 = P2_5;
 237   2              
 238   2      
 239   2              //--------------------------------------------
 240   2              // Kolumna 2 (P2_1=1, P2_2=0, P2_3=1) –
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 16:54:10 PAGE 5   

 241   2              //--------------------------------------------
 242   2              P2_1 = 1; 
 243   2              P2_2 = 0; 
 244   2              P2_3 = 1;
 245   2      
 246   2              // KLAWISZ 5 -> P2_5
 247   2              if(not_pressed_P2_5_2 && !P2_5)
 248   2              {
 249   3                  sleep();
 250   3                  if(correct_sequence1 == 1)
 251   3                  {
 252   4                      correct_sequence2 = 1;
 253   4                  }
 254   3                  else
 255   3                  {
 256   4                      // jezeli spodziewalismy "7" a dostalismy co innego
 257   4                      correct_sequence1 = 0;
 258   4                  }
 259   3                  pin_entry_in_progress = 1;
 260   3              }
 261   2              not_pressed_P2_5_2 = P2_5;
 262   2      
 263   2              // KLAWISZ 8 -> P2_6 (dzwonek, ale TYLKO gdy nie wpisujemy PIN-u)
 264   2              if(not_pressed_P2_6_2 && !P2_6)
 265   2              {
 266   3                  sleep();
 267   3                  if(!pin_entry_in_progress)
 268   3                  {
 269   4                      doorbell();
 270   4                  }
 271   3                  // Przerwanie sekwencji PIN
 272   3                  correct_sequence1 = 0;
 273   3                  correct_sequence2 = 0;
 274   3                  correct_sequence3 = 0;
 275   3              }
 276   2              not_pressed_P2_6_2 = P2_6;
 277   2      
 278   2              // KLAWISZ 0 -> P2_7
 279   2              if(not_pressed_P2_7_2 && !P2_7)
 280   2              {
 281   3                  sleep();
 282   3                  pin_entry_in_progress = 1;
 283   3                  if(correct_sequence1 == 1 && correct_sequence2 == 1)
 284   3                  {
 285   4                      correct_sequence3 = 1; // Mamy 7,5,0
 286   4                  }
 287   3                  else
 288   3                  {
 289   4                      // Sekwencja przerwana
 290   4                      correct_sequence1 = 0;
 291   4                      correct_sequence2 = 0;
 292   4                  }
 293   3              }
 294   2              not_pressed_P2_7_2 = P2_7;
 295   2              
 296   2              // KLAWISZ 2 -> P2_4
 297   2              if(not_pressed_P2_4_2 && !P2_4)
 298   2              {
 299   3                  sleep();
 300   3                  correct_sequence1 = 0;
 301   3                  correct_sequence2 = 0;
 302   3                  correct_sequence3 = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 16:54:10 PAGE 6   

 303   3                  pin_entry_in_progress = 1;
 304   3              }
 305   2              not_pressed_P2_4_2 = P2_4;
 306   2      
 307   2              //--------------------------------------------
 308   2              // Kolumna 3 (P2_1=0, P2_2=1, P2_3=1) –
 309   2              //--------------------------------------------
 310   2              P2_1 = 0; 
 311   2              P2_2 = 1; 
 312   2              P2_3 = 1;
 313   2              
 314   2              // KLAWISZ 3 -> P2_4
 315   2              if(not_pressed_P2_4_3 && !P2_4)
 316   2              {
 317   3                  sleep();
 318   3                  correct_sequence1 = 0;
 319   3                  correct_sequence2 = 0;
 320   3                  correct_sequence3 = 0;
 321   3                  pin_entry_in_progress = 1;
 322   3              }
 323   2              not_pressed_P2_4_3 = P2_4;
 324   2              
 325   2              // KLAWISZ 6 -> P2_5
 326   2              if(not_pressed_P2_5_3 && !P2_5)
 327   2              {
 328   3                  sleep();
 329   3                  correct_sequence1 = 0;
 330   3                  correct_sequence2 = 0;
 331   3                  correct_sequence3 = 0;
 332   3                  pin_entry_in_progress = 1;
 333   3              }
 334   2              not_pressed_P2_5_3 = P2_5;
 335   2              
 336   2              // KLAWISZ 9 -> P2_6
 337   2              if(not_pressed_P2_6_3 && !P2_6)
 338   2              {
 339   3                  sleep();
 340   3                  correct_sequence1 = 0;
 341   3                  correct_sequence2 = 0;
 342   3                  correct_sequence3 = 0;
 343   3                  pin_entry_in_progress = 1;
 344   3              }
 345   2              not_pressed_P2_6_3 = P2_6;
 346   2              
 347   2              // KLAWISZ # -> P2_7 – reset wpisywania
 348   2              if(not_pressed_P2_7_3 && !P2_7)
 349   2              {
 350   3                  sleep();
 351   3                  correct_sequence1 = 0;
 352   3                  correct_sequence2 = 0;
 353   3                  correct_sequence3 = 0;
 354   3                  pin_entry_in_progress = 0;
 355   3              }
 356   2              not_pressed_P2_7_3 = P2_7;
 357   2              
 358   2          }
 359   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    536    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              01/02/2025 16:54:10 PAGE 7   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     16    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
