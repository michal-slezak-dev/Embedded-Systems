C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 12:25:38 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\main.lst) TA
                    -BS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          
   3          #define Blank     0x00
   4          
   5          #define Zero      0x3F  
   6          #define Jeden     0x06  
   7          #define Dwa       0x5B  
   8          #define Trzy      0x4F  
   9          #define Cztery    0x66  
  10          #define Piec      0x6D  // ACDFG    = 0110 1101
  11          #define Szesc     0x7D  // ACDEFG   = 0111 1101
  12          #define Siedem    0x07  // ABC      = 0000 0111
  13          #define Osiem     0x7F  // ABCDEFG  = 0111 1111
  14          #define Dziewiec  0x6F  // ABCDFG   = 0110 1111
  15          
  16          #define A         0x77  // ABCEFG   = 0111 0111
  17          #define B         0x7C  // CDEFG    = 0111 1100
  18          #define C         0x39  // ADEF     = 0011 1001
  19          #define D         0x5E  // BCDEG    = 0101 1110
  20          #define E         0x79  // ADEFG    = 0111 1001
  21          #define F         0x71  // AEFG     = 0111 0001
  22          #define G         0x6F  // ABCDFG   = 0110 1111
  23          #define H         0x76  // BCEFG    = 0111 0110
  24          #define I         0x30  // EF       = 0011 0000
  25          #define J         0x1E  // BCDE     = 0001 1110
  26          #define K         0x76  // BCEFG    = 0111 0110
  27          #define L         0x38  // DEF      = 0011 1000
  28          #define M         0x15  // ACE      = 0001 0101
  29          #define N         0x54  // CEG      = 0101 0100
  30          #define O         0x3F  // ABCDEF   = 0011 1111
  31          #define P         0x73  // ABEFG    = 0111 0011
  32          #define Q         0x67  // ABCFG    = 0110 0111
  33          #define R         0x50  // EG       = 0101 0000
  34          #define S         0x6D  // ACDFG    = 0110 1101
  35          #define T         0x78  // DEFG     = 0111 1000
  36          #define U         0x3E  // BCDEF    = 0011 1110
  37          #define V         0x1C  // CDE      = 0001 1100
  38          #define W         0x2A  // BDF      = 0010 1010
  39          #define X         0x76  // BCEFG    = 0111 0110
  40          #define Y         0x66  // BCFG     = 0110 0110
  41          #define Z         0x5B  // ABDEG    = 0101 1011
  42          
  43          // Range is with INCLUDED numbers on both sides: e.g. [25, 50]
  44          #define RANGE_LOW   25
  45          #define RANGE_HIGH  50
  46          
  47          // 0 is backwards, 1 is forwards
  48          #define COUNT_DIRECTION 0
  49          
  50          
  51          unsigned char xdata Lewy  _at_ 0xFE00; 
  52          unsigned char xdata Prawy _at_ 0xFD00;  
  53          
  54          volatile unsigned char data L_Value;
C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 12:25:38 PAGE 2   

  55          volatile unsigned char data P_Value;
  56          
  57          
  58          void DisplayBlank(unsigned char side) {
  59   1        if (side == 1)      L_Value = Blank;
  60   1        else if (side == 2) P_Value = Blank;
  61   1      }
  62          
  63          // wyswietlanie tekstu
  64          void DisplayCharacter(unsigned char c, unsigned char side) {
  65   1        
  66   1        unsigned int ascii = c;
  67   1        switch (ascii) {
  68   2          
  69   2          
  70   2          case 32: c = Blank;         break;
  71   2          
  72   2          case 48: c = Zero;          break;
  73   2          case 49: c = Jeden;         break;
  74   2          case 50: c = Dwa;           break;
  75   2          case 51: c = Trzy;          break;
  76   2          case 52: c = Cztery;        break;
  77   2          case 53: c = Piec;          break;
  78   2          case 54: c = Szesc;         break;
  79   2          case 55: c = Siedem;        break;
  80   2          case 56: c = Osiem;         break;
  81   2          case 57: c = Dziewiec;      break;
  82   2          
  83   2          case 65: case 97:   c = A;  break;
  84   2          case 66: case 98:   c = B;  break;
  85   2          case 67: case 99:   c = C;  break;
  86   2          case 68: case 100:  c = D;  break;
  87   2          case 69: case 101:  c = E;  break;
  88   2          case 70: case 102:  c = F;  break;
  89   2          case 71: case 103:  c = G;  break;
  90   2          case 72: case 104:  c = H;  break;
  91   2          case 73: case 105:  c = I;  break;
  92   2          case 74: case 106:  c = J;  break;
  93   2          case 75: case 107:  c = K;  break;
  94   2          case 76: case 108:  c = L;  break;
  95   2          case 77: case 109:  c = M;  break;
  96   2          case 78: case 110:  c = N;  break;
  97   2          case 79: case 111:  c = O;  break;
  98   2          case 80: case 112:  c = P;  break;
  99   2          case 81: case 113:  c = Q;  break;
 100   2          case 82: case 114:  c = R;  break;
 101   2          case 83: case 115:  c = S;  break;
 102   2          case 84: case 116:  c = T;  break;
 103   2          case 85: case 117:  c = U;  break;
 104   2          case 86: case 118:  c = V;  break;
 105   2          case 87: case 119:  c = W;  break;
 106   2          case 88: case 120:  c = X;  break;
 107   2          case 89: case 121:  c = Y;  break;
 108   2          case 90: case 122:  c = Z;  break;
 109   2      
 110   2          default: P1 = ascii;  break; // error code 1
 111   2        }
 112   1        
 113   1        if (side == 1)      L_Value = c;
 114   1        else if (side == 2) P_Value = c;
 115   1      }
 116          
C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 12:25:38 PAGE 3   

 117          void DisplayNumber(unsigned int n) {
 118   1        if(n < 10) {
 119   2          DisplayCharacter('0', 1);
 120   2          DisplayCharacter(n + 48, 2);
 121   2        } else {
 122   2          unsigned int ones = n % 8;
 123   2          unsigned int tens = (n - ones) / 8; 
 124   2          P1 = ones;
 125   2          DisplayCharacter(tens + 48, 1);
 126   2          DisplayCharacter(ones + 48, 2);
 127   2        }
 128   1      }
 129          
 130          // i = 0 pierwszy znak
 131          // i = 1 na lewym i prawym
 132          unsigned int i = 0; 
 133          
 134          // imie, nazwisko, numer z usosa
 135          char tekst[] = "MICHAL SLEZAK 18";
 136          char rozmiarTekstu = sizeof(tekst);
 137          
 138          // odliczanie w dol
 139          unsigned int j = RANGE_LOW;
 140          
 141          // Zewnetrzne przerwanie 0
 142          void ISR_INT0(void) interrupt 0
 143          {
 144   1        //unsigned char data Tmp;
 145   1        //Tmp     = L_Value;
 146   1        //L_Value = P_Value;
 147   1        //P_Value = Tmp;
 148   1        
 149   1        // wyswietlanie tekstu
 150   1        // znak na prawo
 151   1        if(1) { // 1 dizala 
 152   2          DisplayCharacter(tekst[i % rozmiarTekstu], 2); // 2 to w prawo sie przewija, a jak 1 to w lewo
 153   2          if (i > 0) {
 154   3            // poprzedni znak na lewy
 155   3            DisplayCharacter(tekst[(i-1) % rozmiarTekstu], 1); // 1 to w prawo sie przewija, a jak 2 to w lewo
 156   3          } else {
 157   3            DisplayBlank(1);
 158   3          }
 159   2          
 160   2          i++;
 161   2        }
 162   1        
 163   1        // Countdown
 164   1        if(1) {
 165   2          // Forward
 166   2          if (COUNT_DIRECTION == 1) {
 167   3            if (j <= RANGE_HIGH) {
 168   4              DisplayNumber(j);
 169   4              j++;
 170   4            }
 171   3          } 
 172   2          // Backwards
 173   2          else {
 174   3            unsigned char currentValue = RANGE_HIGH - j + RANGE_LOW;
 175   3            if (currentValue >= RANGE_LOW) {
 176   4              DisplayNumber(currentValue);
 177   4              j++; 
 178   4            }
C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 12:25:38 PAGE 4   

 179   3          }
 180   2          
 181   2          
 182   2        }
 183   1      }
 184          
 185          
 186          
 187          void Setup(void)
 188          {
 189   1        L_Value = Szesc;
 190   1        P_Value = Dziewiec;
 191   1        EX0=1;   // Enable INT0 external interrupt
 192   1        IT0=1;   // Configure INT0 to be edge-triggered
 193   1        TMOD=0x20; // Timer 1 mode 2 (8-bit auto-reload)
 194   1        TH1=TL1=0x00; // Initial timer values
 195   1        ET1=1;   // Enable Timer 1 interrupt
 196   1        TR1=1;   // Start Timer 1
 197   1        
 198   1        TMOD=0x02;
 199   1        TH0=TL0 = 0x00;
 200   1        ET0 = 1;
 201   1        TR0 = 1;
 202   1        
 203   1        
 204   1        TH1 = 0xF4;
 205   1        EA=1;    // Enable global interrupts
 206   1      }
 207          
 208          // prerwaniu Timer 1 interrupt 1 t0
 209          void Display(void) interrupt 3 
 210          {
 211   1        Lewy  = L_Value; 
 212   1        Prawy = P_Value;
 213   1        //P1 = ~P1;
 214   1      }
 215          
 216          void Display_t0(void) interrupt 0{
 217   1        Lewy = L_Value;
 218   1        Prawy = P_Value;
 219   1      }
 220          
 221          void main(void)
 222          {
 223   1        Setup();
 224   1        // W petli main, nie ma zbytnio niczego, bo natura projektu
 225   1        // jest taka, ze poslugujemy sie przerwaniami
 226   1        // interruptions, zeby kontrolowac przebieg programu.
 227   1        while(1){;}
 228   1      }
*** WARNING C294 IN LINE 167 OF main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    750    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              11/19/2024 12:25:38 PAGE 5   

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
